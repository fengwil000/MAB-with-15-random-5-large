{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mBzW68YcdWWWqlATncbBG-rA1XgEbrF2","timestamp":1743257701503},{"file_id":"1v-HTYQfp0iMrineDoMv8IM2Det2uEDmD","timestamp":1742440208543}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import yfinance as yf\n","import random\n","import pandas as pd\n","import numpy as np\n","import sqlite3\n","import plotly.express as px"],"metadata":{"id":"uhqCjxGMvxox","executionInfo":{"status":"ok","timestamp":1743917458749,"user_tz":240,"elapsed":8976,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["url = \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n","df = pd.read_html(url)[0]\n","sp500_tickers = df[\"Symbol\"].tolist()"],"metadata":{"id":"jSOJvWr7x-Eg","executionInfo":{"status":"ok","timestamp":1743917459748,"user_tz":240,"elapsed":1000,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["\n","Company_count = 20\n","best_tech_tickers = [\"AAPL\", \"TSLA\", \"GOOGL\", \"MSFT\", \"AMD\"]  # Top tech companies from 2008\n","random_tickers = random.sample(sp500_tickers, Company_count - 5) + best_tech_tickers  # Ensure inclusion of top tech\n","\n","open_binaries = {}  # Create the database\n","finance_data = yf.Tickers(random_tickers)  # Match companies to YFinance\n","\n","# Store open price changes in binary form\n","for ticker in random_tickers:\n","    dat = finance_data.tickers[ticker]\n","\n","    if ticker in best_tech_tickers:\n","        # Use data from 2008 for the 5 best tech companies\n","        open_prices = dat.history(start=\"2019-01-01\", end=\"2019-12-31\")[\"Open\"].values\n","    else:\n","        # Use last year's data for the other 15 companies\n","        open_prices = dat.history(period=\"1y\")[\"Open\"].values\n","\n","    # Compute binary changes\n","    open_diff = np.diff(open_prices)\n","    open_binary = np.where(open_diff > 0, 1, 0)\n","    open_binaries[ticker] = open_diff\n","\n","# Find the minimum length to trim all arrays\n","min_length = min(len(arr) for arr in open_binaries.values())\n","\n","# Trim all arrays to the same length\n","for ticker in open_binaries:\n","    open_binaries[ticker] = open_binaries[ticker][:min_length]\n","\n","# Convert to DataFrame\n","df_binaries = pd.DataFrame(open_binaries)\n","print(\"Binary DataFrame:\")\n","print(df_binaries)\n","\n","# Connect to the SQLite database (create if it doesn't exist)\n","conn = sqlite3.connect('stock_data.db')\n","\n","# Create a table for storing the binary data if it doesn't already exist\n","df_binaries.to_sql('stock_open_binaries', conn, if_exists='replace', index=False)\n","\n","# Commit and close the connection\n","conn.commit()\n","conn.close()\n","\n","print(\"\\nData stored in database successfully!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kWXZlgIBN5O6","outputId":"17e50a30-88fb-437f-f739-4c8a6123809e","collapsed":true,"executionInfo":{"status":"ok","timestamp":1743917465844,"user_tz":240,"elapsed":6095,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Binary DataFrame:\n","          WFC        RCL        ESS        VST       PNR        SHW      RVTY  \\\n","0    0.732204   0.119014   4.937146   4.472641  1.464514   1.398380  0.708227   \n","1    0.312402   0.515797   4.608686  -0.059504 -0.366125   4.135505  5.655789   \n","2   -0.888407  -5.941481  -1.111137  -6.267634 -2.028555  -9.173545  0.019956   \n","3    0.185494  -0.753829   2.753611   2.419778  0.702563  -4.869461  1.356594   \n","4   -0.986035   0.486048  -2.705290   0.743780 -1.731691  -4.849650 -1.915195   \n","..        ...        ...        ...        ...       ...        ...       ...   \n","245 -2.369995 -14.779999   0.467077  -4.599998 -2.720001  -8.130005 -2.370003   \n","246  0.939995   4.510010   2.259979   4.379997  1.190002  10.130005 -0.199997   \n","247 -0.279999  -0.410004  -2.859985   0.570000 -0.310005  -1.410004 -1.599998   \n","248 -2.779999  -8.119995   1.239990  -4.629997 -1.489998  -2.700012  0.309998   \n","249 -5.029999 -16.490005 -16.989990 -10.650002 -5.169998  -5.500000 -5.190002   \n","\n","          CCI       PFE       MAS       USB       GIS       MGM       CHTR  \\\n","0    0.394909  0.037644  0.383940  0.515828 -0.385729  0.889999  -3.000000   \n","1   -0.075226  0.159971  0.098438  0.506275  0.212231 -0.360001   3.979980   \n","2   -1.034283 -0.235254 -2.707158 -0.773741  0.515435 -0.970001  -4.109985   \n","3   -1.212942 -0.159972 -0.216569 -0.773737 -0.875260 -0.949997  -1.059998   \n","4   -1.447996 -0.094104 -1.516017 -0.945687 -1.838056 -0.350002  -1.380005   \n","..        ...       ...       ...       ...       ...       ...        ...   \n","245  1.360001 -0.230001 -2.589996 -1.259352 -0.279999 -1.520000 -16.149994   \n","246  0.339996  0.490002  1.289993  0.470001  0.350002 -0.199999  -2.660004   \n","247  0.000000 -0.790001 -0.409996 -0.590000 -0.010002 -0.070002   4.699982   \n","248  0.910004  0.240000 -1.370003 -0.119999 -0.020000 -0.559999   7.480011   \n","249  2.769997 -0.799999 -5.669998 -3.780003  0.950001 -2.030001 -13.279999   \n","\n","          WDC      AAPL      TSLA     GOOGL      MSFT       AMD  \n","0    1.390778 -2.602251  0.059999  1.167910  0.517343  0.410000  \n","1    0.513985  0.131176 -0.066668 -0.403567 -0.357419 -0.870001  \n","2   -3.114136  0.994630  1.048000  1.911360  1.806071  1.890001  \n","3    0.695389  0.205124  1.349333  0.250300  1.316924  1.750000  \n","4    0.582012  0.412650 -0.430666  0.099033  0.771334 -0.300001  \n","..        ...       ...       ...       ...       ...       ...  \n","245 -1.610001 -0.411549  0.099333 -0.217446  0.735009  1.140003  \n","246  0.309998  1.007159  0.438667 -0.423986 -0.610915  1.519997  \n","247  0.220001  0.031458  0.636665 -0.182124  0.076391  0.890003  \n","248 -1.560001  1.525256  0.472668  0.868345  1.804115 -0.140003  \n","249 -6.049999 -0.401887 -0.414000 -0.357791 -0.439076 -0.709999  \n","\n","[250 rows x 20 columns]\n","\n","Data stored in database successfully!\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Initialize DataFrames\n","Greedyinfo = pd.DataFrame(columns=[\"K\", \"GreedyRegret\"])\n","UCB1info = pd.DataFrame(columns=[\"K\", \"UCB1Regret\"])\n","payout_df = pd.DataFrame(columns=[\"K\", \"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\"])\n","\n","# Initialize lists for NumPy array conversion\n","K_values = []\n","Optimal_scores = []\n","Actual_scores_Greedy = []\n","Actual_scores_UCB1 = []\n","Greedy_Regrets = []\n","UCB1_Regrets = []\n","\n","# Set parameters\n","arrays = list(open_binaries.values())[:Company_count]\n","EPS = 0.2\n","turns = len(open_binary)-1\n","# Greedy Algorithm Initialization\n","Optimal_score = 0\n","actual_score_Greedy = 0\n","average_rewards_Greedy = np.zeros(Company_count)\n","counts_Greedy = np.zeros(Company_count)\n","\n","# Run Greedy Algorithm\n","for K in range(1, turns + 1):\n","    if np.random.rand() < EPS:\n","        chosen_array_index = np.random.choice(Company_count)\n","    else:\n","        chosen_array_index = np.argmax(average_rewards_Greedy)\n","    n=K-1\n","    best_reward_at_k = max(arrays[i][n % turns] for i in range(Company_count))\n","    reward = arrays[chosen_array_index][n % turns]\n","    actual_score_Greedy += reward\n","    counts_Greedy[chosen_array_index] += 1\n","    average_rewards_Greedy[chosen_array_index] += (reward - average_rewards_Greedy[chosen_array_index]) / counts_Greedy[chosen_array_index]\n","    Optimal_score += best_reward_at_k\n","    regret_Greedy = Optimal_score - actual_score_Greedy\n","\n","    # Store results\n","    K_values.append(K)\n","    Optimal_scores.append(Optimal_score)\n","    Actual_scores_Greedy.append(actual_score_Greedy)\n","    Greedy_Regrets.append(regret_Greedy)\n","\n","    # Append to Greedyinfo DataFrame\n","    Greedyinfo = pd.concat([Greedyinfo, pd.DataFrame([{\"K\": K, \"GreedyRegret\": regret_Greedy}])], ignore_index=True)\n","\n","\n","# Reset parameters for UCB1 Algorithm\n","Optimal_score = 0\n","actual_score_UCB1 = 0\n","average_rewards_UCB1 = np.zeros(Company_count)\n","counts_UCB1 = np.zeros(Company_count)\n","\n","# Run UCB1 Algorithm\n","for K in range(1, turns + 1):\n","    if 0 in counts_UCB1:\n","        chosen_array_index = np.argmin(counts_UCB1)\n","    else:\n","        ucb_values = average_rewards_UCB1 + np.sqrt((2 * np.log(K)) / counts_UCB1)\n","        chosen_array_index = np.argmax(ucb_values)\n","    n=K-1\n","    best_reward_at_k = max(arrays[i][n % turns] for i in range(Company_count))\n","    reward = arrays[chosen_array_index][n % turns]\n","    actual_score_UCB1 += reward\n","\n","    counts_UCB1[chosen_array_index] += 1\n","    average_rewards_UCB1[chosen_array_index] += (reward - average_rewards_UCB1[chosen_array_index]) / counts_UCB1[chosen_array_index]\n","    Optimal_score += best_reward_at_k\n","    regret_UCB1 = Optimal_score - actual_score_UCB1\n","\n","    # Store UCB1 results\n","    Actual_scores_UCB1.append(actual_score_UCB1)\n","    UCB1_Regrets.append(regret_UCB1)\n","\n","    # Append to UCB1info DataFrame\n","    UCB1info = pd.concat([UCB1info, pd.DataFrame([{\"K\": K, \"UCB1Regret\": regret_UCB1}])], ignore_index=True)\n","\n","\n","# Convert to NumPy array and then to DataFrame\n","data_np = np.array([K_values, Optimal_scores, Actual_scores_Greedy, Actual_scores_UCB1, Greedy_Regrets, UCB1_Regrets]).T\n","payout_df = pd.DataFrame(data_np, columns=[\"K\", \"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\", \"GreedyRegret\", \"UCB1Regret\"])\n","\n","# Display DataFrames\n","print(\"Payout DataFrame:\")\n","print(payout_df)"],"metadata":{"id":"WfdzYWY230IX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743917466983,"user_tz":240,"elapsed":1117,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}},"outputId":"0b952862-1cf5-46e5-9e50-eedd855ca522"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-b736aada4904>:49: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n","  Greedyinfo = pd.concat([Greedyinfo, pd.DataFrame([{\"K\": K, \"GreedyRegret\": regret_Greedy}])], ignore_index=True)\n","<ipython-input-4-b736aada4904>:80: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n","  UCB1info = pd.concat([UCB1info, pd.DataFrame([{\"K\": K, \"UCB1Regret\": regret_UCB1}])], ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["Payout DataFrame:\n","         K  Optimal_Score  Actual_Score_Greedy  Actual_Score_UCB1  \\\n","0      1.0       4.937146             0.732204           0.732204   \n","1      2.0      10.592935             1.044606           1.248001   \n","2      3.0      12.504295             1.560041           0.136863   \n","3      4.0      15.257906             1.745535           2.556641   \n","4      5.0      16.029240            -0.092521           0.824950   \n","..     ...            ...                  ...                ...   \n","244  245.0    1445.140209            11.862492          43.422711   \n","245  246.0    1446.500210            12.597501          44.562714   \n","246  247.0    1456.630215            11.986586          46.082711   \n","247  248.0    1461.330196            12.062978          46.972714   \n","248  249.0    1468.810207            13.867093          46.832711   \n","\n","     GreedyRegret   UCB1Regret  \n","0        4.204943     4.204943  \n","1        9.548329     9.344934  \n","2       10.944254    12.367431  \n","3       13.512371    12.701265  \n","4       16.121761    15.204290  \n","..            ...          ...  \n","244   1433.277718  1401.717498  \n","245   1433.902709  1401.937496  \n","246   1444.643628  1410.547504  \n","247   1449.267219  1414.357482  \n","248   1454.943114  1421.977497  \n","\n","[249 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# Ensure \"K\" is in both DataFrames before merging\n","Greedyinfo = Greedyinfo.set_index(\"K\")\n","UCB1info = UCB1info.set_index(\"K\")\n","\n","# Merge the regret DataFrames and reset index\n","onlyregret_df = pd.concat([Greedyinfo, UCB1info], axis=1).reset_index()\n","\n","# Verify correct columns exist\n","print(onlyregret_df.columns)\n","\n","# Convert \"K\" to numeric\n","onlyregret_df[\"K\"] = pd.to_numeric(onlyregret_df[\"K\"])\n","\n","# Melt the DataFrame for Plotly\n","df_melted = onlyregret_df.melt(id_vars=[\"K\"], value_vars=[\"GreedyRegret\", \"UCB1Regret\"],\n","                               var_name=\"Algorithm\", value_name=\"Regret\")\n","\n","df_log = df.DataFrame({x: np.log(x) for x in range(1, 250)})\n","\n","# Plot using Plotly\n","fig = px.line(df_melted, x=\"K\", y=\"Regret\", color=\"Algorithm\", markers=True,\n","              title=\"Regret Comparison\")\n","fig.show()\n"],"metadata":{"id":"hx-vRqMUgmog","collapsed":true,"colab":{"base_uri":"https://localhost:8080/","height":395},"executionInfo":{"status":"error","timestamp":1743917532219,"user_tz":240,"elapsed":31,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}},"outputId":"f99a1085-cd56-4dd5-e160-b00f8726451d"},"execution_count":6,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of ['K'] are in the columns\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-f214aecc82a9>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Ensure \"K\" is in both DataFrames before merging\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mGreedyinfo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGreedyinfo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"K\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mUCB1info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mUCB1info\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"K\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Merge the regret DataFrames and reset index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mset_index\u001b[0;34m(self, keys, drop, append, inplace, verify_integrity)\u001b[0m\n\u001b[1;32m   6120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6121\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6122\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of {missing} are in the columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6124\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of ['K'] are in the columns\""]}]},{"cell_type":"code","source":["df_melted_payoff = payout_df.melt(id_vars=[\"K\"], value_vars=[\"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\"],\n","                               var_name=\"Algorithm\", value_name=\"Cumulative Reward\")\n","fig = px.line(df_melted_payoff, x=\"K\", y=\"Cumulative Reward\", color=\"Algorithm\", markers=True,\n","              title=\"Payoff Comparison\")\n","fig.show()"],"metadata":{"id":"zxYnE47wkS9L","executionInfo":{"status":"aborted","timestamp":1743917467376,"user_tz":240,"elapsed":43,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["This is a markdown cell where you can put some text and things. Just double click the cell, or add a new one using the \"+ Text\" option above next to Commands.\n","\n","You can also make section headings with\n","\n","# SECTION\n","\n","## SECTION\n","\n","and bulleted lists:\n","\n","* item 1\n","* item 2\n","* item 3"],"metadata":{"id":"iumc866nt2Fx"}},{"cell_type":"code","source":[],"metadata":{"id":"-oIHtjV2kiCf","executionInfo":{"status":"aborted","timestamp":1743917467378,"user_tz":240,"elapsed":6,"user":{"displayName":"Anthony Della Pella","userId":"13401786047182570124"}}},"execution_count":null,"outputs":[]}]}