{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import yfinance as yf\n","import random\n","import pandas as pd\n","import numpy as np\n","import sqlite3\n","import plotly.express as px"],"metadata":{"id":"uhqCjxGMvxox","executionInfo":{"status":"ok","timestamp":1744519078428,"user_tz":300,"elapsed":15,"user":{"displayName":"William Feng","userId":"09292183402283000697"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["url = \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n","df = pd.read_html(url)[0]\n","sp500_tickers = df[\"Symbol\"].tolist()"],"metadata":{"id":"jSOJvWr7x-Eg","executionInfo":{"status":"ok","timestamp":1744519078896,"user_tz":300,"elapsed":470,"user":{"displayName":"William Feng","userId":"09292183402283000697"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["20 random companies are pulled from the S&P500. Open prices are stored for the companies, and between days a value of 1 is assigned to companies experiencing an increase, while a value of 0 is assigned to companies experiencing a decrease. This information is stored in df_binaries."],"metadata":{"id":"EW4GYmLyG747"}},{"cell_type":"code","source":["Company_count = 20\n","random_tickers = random.sample(sp500_tickers, Company_count)\n","for ticker in random_tickers:\n","    stock = yf.Ticker(ticker)\n","open_binaries = {} #create the database\n","finance_data = yf.Tickers(random_tickers) #match random companies to Yfinance. Is this needed?\n","for ticker in random_tickers:\n","    dat = finance_data.tickers[ticker]\n","    open_prices = dat.history(start=\"2010-01-01\", end=\"2015-12-31\")[\"Open\"].values\n","    open_diff = np.diff(open_prices)\n","    open_binary = np.where(open_diff > 0, 1, 0) #searched up function, assigns bernoulli dist to data\n","    open_binaries[ticker]=(open_binary)\n","min_length = min(len(arr) for arr in open_binaries.values())\n","\n","\n","# Trim all arrays to the same length\n","for ticker in open_binaries:\n","    open_binaries[ticker] = open_binaries[ticker][:min_length]\n","for ticker, binary_array in open_binaries.items():\n","   (f\"{ticker}: {binary_array}\") #update database\n","   df_binaries = pd.DataFrame(open_binaries)\n","# Check the structure of the DataFrame\n","print(\"Binary DataFrame:\")\n","print(df_binaries)\n","\n","# Connect to the SQLite database (create if it doesn't exist)\n","conn = sqlite3.connect('stock_data.db')\n","\n","# Create a table for storing the binary data if it doesn't already exist\n","df_binaries.to_sql('stock_open_binaries', conn, if_exists='replace', index=False)\n","\n","# Commit and close the connection\n","conn.commit()\n","conn.close()\n","\n","print(\"\\nData stored in database successfully!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kWXZlgIBN5O6","outputId":"d95c4c71-005f-44e8-f042-2ec33008795d","collapsed":true,"executionInfo":{"status":"ok","timestamp":1744519287063,"user_tz":300,"elapsed":2780,"user":{"displayName":"William Feng","userId":"09292183402283000697"}}},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Binary DataFrame:\n","     PYPL  BBY  NXPI  AKAM  DVN  SBUX  XOM  RTX  ZBH  GEN  ARE  SYF  LHX  UHS  \\\n","0       0    1     1     1    1     0    1    1    1    1    0    0    1    1   \n","1       0    1     0     1    0     1    1    0    1    0    0    1    0    0   \n","2       0    0     0     0    0     0    1    0    1    1    0    0    1    0   \n","3       0    0     0     0    0     0    0    1    0    0    1    0    1    1   \n","4       1    0     0     1    1     1    1    1    1    1    1    1    0    1   \n","..    ...  ...   ...   ...  ...   ...  ...  ...  ...  ...  ...  ...  ...  ...   \n","119     1    0     1     0    0     0    0    0    0    0    0    1    0    0   \n","120     1    0     0     1    0     1    0    1    0    1    1    1    0    0   \n","121     0    0     0     0    0     0    0    0    1    0    0    1    0    0   \n","122     1    0     1     0    0     0    0    0    0    0    0    1    0    0   \n","123     1    0     1     0    0     0    0    0    0    0    0    1    0    0   \n","\n","     SBAC  TER  PSX  TPR  GS  CBRE  \n","0       1    1    1    0   1     1  \n","1       1    1    1    1   1     1  \n","2       0    0    0    1   0     0  \n","3       1    1    0    0   1     0  \n","4       1    1    0    1   0     1  \n","..    ...  ...  ...  ...  ..   ...  \n","119     0    0    1    0   1     0  \n","120     1    0    0    0   1     1  \n","121     0    0    0    0   0     0  \n","122     0    0    1    0   0     0  \n","123     0    0    1    0   0     0  \n","\n","[124 rows x 20 columns]\n","\n","Data stored in database successfully!\n"]}]},{"cell_type":"markdown","source":["The Epsilon-Greedy algorithm and UCB1 algorithm are implemented on df_Binaries. Both the payout of the algorithm as well as cumulative regret is stored in Payout_df."],"metadata":{"id":"KHyZ9xX_Hj86"}},{"cell_type":"code","source":["\n","# Initialize DataFrames\n","Greedyinfo = pd.DataFrame(columns=[\"K\", \"GreedyRegret\"])\n","UCB1info = pd.DataFrame(columns=[\"K\", \"UCB1Regret\"])\n","payout_df = pd.DataFrame(columns=[\"K\", \"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\"])\n","\n","# Initialize lists for NumPy array conversion\n","K_values = []\n","Optimal_scores = []\n","Actual_scores_Greedy = []\n","Actual_scores_UCB1 = []\n","Greedy_Regrets = []\n","UCB1_Regrets = []\n","\n","# Set parameters\n","arrays = list(open_binaries.values())[:Company_count]\n","EPS = 0.5\n","turns = len(binary_array)\n","# Greedy Algorithm Initialization\n","Optimal_score = 0\n","actual_score_Greedy = 0\n","average_rewards_Greedy = np.zeros(Company_count)\n","counts_Greedy = np.zeros(Company_count)\n","\n","# Run Greedy Algorithm\n","for K in range(1, turns + 1):\n","    if np.random.rand() < EPS:\n","        chosen_array_index = np.random.choice(Company_count)\n","    else:\n","        chosen_array_index = np.argmax(average_rewards_Greedy)\n","    n=K-1\n","    best_reward_at_k = max(arrays[i][n % turns] for i in range(Company_count))\n","    reward = arrays[chosen_array_index][n % turns]\n","    actual_score_Greedy += reward\n","    counts_Greedy[chosen_array_index] += 1\n","    average_rewards_Greedy[chosen_array_index] += (reward - average_rewards_Greedy[chosen_array_index]) / counts_Greedy[chosen_array_index]\n","    Optimal_score += best_reward_at_k\n","    regret_Greedy = Optimal_score - actual_score_Greedy\n","\n","    # Store results\n","    K_values.append(K)\n","    Optimal_scores.append(Optimal_score)\n","    Actual_scores_Greedy.append(actual_score_Greedy)\n","    Greedy_Regrets.append(regret_Greedy)\n","\n","    # Append to Greedyinfo DataFrame\n","    Greedyinfo = pd.concat([Greedyinfo, pd.DataFrame([{\"K\": K, \"GreedyRegret\": regret_Greedy}])], ignore_index=True)\n","\n","\n","# Reset parameters for UCB1 Algorithm\n","Optimal_score = 0\n","actual_score_UCB1 = 0\n","average_rewards_UCB1 = np.zeros(Company_count)\n","counts_UCB1 = np.zeros(Company_count)\n","\n","# Run UCB1 Algorithm\n","for K in range(1, turns + 1):\n","    if 0 in counts_UCB1:\n","        chosen_array_index = np.argmin(counts_UCB1)\n","    else:\n","        ucb_values = average_rewards_UCB1 + np.sqrt((2 * np.log(K)) / counts_UCB1)\n","        chosen_array_index = np.argmax(ucb_values)\n","    n=K-1\n","    best_reward_at_k = max(arrays[i][n % turns] for i in range(Company_count))\n","    reward = arrays[chosen_array_index][n % turns]\n","    actual_score_UCB1 += reward\n","\n","    counts_UCB1[chosen_array_index] += 1\n","    average_rewards_UCB1[chosen_array_index] += (reward - average_rewards_UCB1[chosen_array_index]) / counts_UCB1[chosen_array_index]\n","    Optimal_score += best_reward_at_k\n","    regret_UCB1 = Optimal_score - actual_score_UCB1\n","\n","    # Store UCB1 results\n","    Actual_scores_UCB1.append(actual_score_UCB1)\n","    UCB1_Regrets.append(regret_UCB1)\n","\n","    # Append to UCB1info DataFrame\n","    UCB1info = pd.concat([UCB1info, pd.DataFrame([{\"K\": K, \"UCB1Regret\": regret_UCB1}])], ignore_index=True)\n","\n","\n","# Convert to NumPy array and then to DataFrame\n","data_np = np.array([K_values, Optimal_scores, Actual_scores_Greedy, Actual_scores_UCB1, Greedy_Regrets, UCB1_Regrets]).T\n","payout_df = pd.DataFrame(data_np, columns=[\"K\", \"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\", \"GreedyRegret\", \"UCB1Regret\"])\n","\n","# Display DataFrames\n","print(\"Payout DataFrame:\")\n","print(payout_df)"],"metadata":{"id":"WfdzYWY230IX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1744519342266,"user_tz":300,"elapsed":198,"user":{"displayName":"William Feng","userId":"09292183402283000697"}},"outputId":"a892f43d-cfec-4829-c7c5-dfd7a31f20a8"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Payout DataFrame:\n","       K  Optimal_Score  Actual_Score_Greedy  Actual_Score_UCB1  GreedyRegret  \\\n","0      1              1                    0                  0             1   \n","1      2              2                    0                  1             2   \n","2      3              3                    1                  1             2   \n","3      4              4                    1                  1             3   \n","4      5              5                    1                  2             4   \n","..   ...            ...                  ...                ...           ...   \n","119  120            119                   60                 68            59   \n","120  121            120                   60                 68            60   \n","121  122            121                   60                 68            61   \n","122  123            122                   61                 68            61   \n","123  124            123                   61                 69            62   \n","\n","     UCB1Regret  \n","0             1  \n","1             1  \n","2             2  \n","3             3  \n","4             3  \n","..          ...  \n","119          51  \n","120          52  \n","121          53  \n","122          54  \n","123          54  \n","\n","[124 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# Ensure \"K\" is in both DataFrames before merging\n","Greedyinfo = Greedyinfo.set_index(\"K\")\n","UCB1info = UCB1info.set_index(\"K\")\n","\n","# Merge the regret DataFrames and reset index\n","onlyregret_df = pd.concat([Greedyinfo, UCB1info], axis=1).reset_index()\n","\n","# Verify correct columns exist\n","print(onlyregret_df.columns)\n","\n","# Convert \"K\" to numeric\n","onlyregret_df[\"K\"] = pd.to_numeric(onlyregret_df[\"K\"])\n","\n","# Melt the DataFrame for Plotly\n","df_melted = onlyregret_df.melt(id_vars=[\"K\"], value_vars=[\"GreedyRegret\", \"UCB1Regret\"],\n","                               var_name=\"Algorithm\", value_name=\"Regret\")\n","\n","# Plot using Plotly\n","fig = px.line(df_melted, x=\"K\", y=\"Regret\", color=\"Algorithm\", markers=True,\n","              title=\"Regret Comparison\")\n","fig.show()\n"],"metadata":{"id":"hx-vRqMUgmog","collapsed":true,"executionInfo":{"status":"ok","timestamp":1744519345643,"user_tz":300,"elapsed":85,"user":{"displayName":"William Feng","userId":"09292183402283000697"}},"colab":{"base_uri":"https://localhost:8080/","height":559},"outputId":"1234223e-cb2f-4bda-8cfd-7beb974e3d63"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['K', 'GreedyRegret', 'UCB1Regret'], dtype='object')\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"5baa0957-3eb3-436d-a176-3736d0e846bd\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5baa0957-3eb3-436d-a176-3736d0e846bd\")) {                    Plotly.newPlot(                        \"5baa0957-3eb3-436d-a176-3736d0e846bd\",                        [{\"hovertemplate\":\"Algorithm=GreedyRegret\\u003cbr\\u003eK=%{x}\\u003cbr\\u003eRegret=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"GreedyRegret\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"GreedyRegret\",\"orientation\":\"h\",\"showlegend\":true,\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],\"xaxis\":\"x\",\"y\":[1,2,2,3,4,4,5,5,6,7,8,9,10,11,11,11,11,12,12,12,12,13,14,14,14,15,16,17,17,17,18,19,19,20,21,22,22,22,22,23,24,24,25,25,25,26,26,26,27,27,28,28,29,29,29,30,31,31,31,31,32,32,32,33,34,34,34,35,36,36,37,38,38,38,39,40,41,41,42,42,43,44,44,44,44,44,44,44,44,44,45,46,46,46,46,47,47,48,48,48,48,49,50,50,51,52,53,54,54,54,54,54,55,56,57,57,58,59,59,59,60,61,61,62],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"Algorithm=UCB1Regret\\u003cbr\\u003eK=%{x}\\u003cbr\\u003eRegret=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"UCB1Regret\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"UCB1Regret\",\"orientation\":\"h\",\"showlegend\":true,\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],\"xaxis\":\"x\",\"y\":[1,1,2,3,3,4,4,4,4,5,5,5,6,7,8,8,9,10,11,11,11,12,13,14,14,15,16,16,16,16,17,17,17,18,18,19,19,20,21,21,21,21,21,21,22,22,22,23,24,24,24,24,25,26,27,28,28,28,28,28,28,28,28,29,30,30,30,31,31,31,31,32,32,32,32,32,32,33,33,33,33,34,35,36,36,37,37,37,37,37,38,38,38,38,39,40,40,41,41,42,42,43,44,44,45,45,45,46,46,46,46,47,47,47,48,48,49,50,50,51,52,53,54,54],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"K\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Regret\"}},\"legend\":{\"title\":{\"text\":\"Algorithm\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Regret Comparison\"}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('5baa0957-3eb3-436d-a176-3736d0e846bd');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["df_melted_payoff = payout_df.melt(id_vars=[\"K\"], value_vars=[\"Optimal_Score\", \"Actual_Score_Greedy\", \"Actual_Score_UCB1\"],\n","                               var_name=\"Algorithm\", value_name=\"Cumulative Reward\")\n","fig = px.line(df_melted_payoff, x=\"K\", y=\"Cumulative Reward\", color=\"Algorithm\", markers=True,\n","              title=\"Payoff Comparison\")\n","fig.show()"],"metadata":{"id":"zxYnE47wkS9L","executionInfo":{"status":"ok","timestamp":1744519316208,"user_tz":300,"elapsed":76,"user":{"displayName":"William Feng","userId":"09292183402283000697"}},"colab":{"base_uri":"https://localhost:8080/","height":542},"outputId":"b1c2a63d-b819-4c7b-a9a1-58e778017466"},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"4eb41d6a-5b89-444a-8a12-17e93bbebbbf\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"4eb41d6a-5b89-444a-8a12-17e93bbebbbf\")) {                    Plotly.newPlot(                        \"4eb41d6a-5b89-444a-8a12-17e93bbebbbf\",                        [{\"hovertemplate\":\"Algorithm=Optimal_Score\\u003cbr\\u003eK=%{x}\\u003cbr\\u003eCumulative Reward=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Optimal_Score\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"Optimal_Score\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],\"xaxis\":\"x\",\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"Algorithm=Actual_Score_Greedy\\u003cbr\\u003eK=%{x}\\u003cbr\\u003eCumulative Reward=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Actual_Score_Greedy\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"Actual_Score_Greedy\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],\"xaxis\":\"x\",\"y\":[1,1,1,1,2,2,3,3,4,4,5,5,5,5,5,5,6,6,7,8,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,13,13,13,14,14,15,15,16,16,16,17,17,17,18,19,19,19,20,20,21,21,22,22,22,22,23,24,25,25,26,27,28,29,30,30,30,31,31,32,33,34,34,35,36,37,37,38,38,38,38,39,40,41,42,42,42,42,42,42,42,43,43,44,45,46,46,46,47,47,47,47,48,49,50,51,51,52,53,53,54,54,54,54,54,54,54,54,54],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"Algorithm=Actual_Score_UCB1\\u003cbr\\u003eK=%{x}\\u003cbr\\u003eCumulative Reward=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Actual_Score_UCB1\",\"line\":{\"color\":\"#00cc96\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"Actual_Score_UCB1\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124],\"xaxis\":\"x\",\"y\":[0,1,1,1,2,2,3,4,5,5,6,7,7,7,7,8,8,8,8,9,10,10,10,10,11,11,11,12,13,14,14,15,16,16,17,17,18,18,18,19,20,21,22,23,23,24,25,25,25,26,27,28,28,28,28,28,29,30,31,32,33,34,35,35,35,36,37,37,38,39,40,40,41,42,43,44,45,45,46,47,48,48,48,48,49,49,50,51,52,53,53,54,55,55,55,55,56,56,57,57,58,58,58,59,59,60,61,61,62,63,64,64,65,66,66,67,67,67,68,68,68,68,68,69],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"K\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cumulative Reward\"}},\"legend\":{\"title\":{\"text\":\"Algorithm\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Payoff Comparison\"}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('4eb41d6a-5b89-444a-8a12-17e93bbebbbf');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["This is a markdown cell where you can put some text and things. Just double click the cell, or add a new one using the \"+ Text\" option above next to Commands.\n","\n","You can also make section headings with\n","\n","# SECTION\n","\n","## SECTION\n","\n","and bulleted lists:\n","\n","* item 1\n","* item 2\n","* item 3"],"metadata":{"id":"iumc866nt2Fx"}}]}